C Operators
===========

An operator is simply a symbol that is used to perform operations. There can be many types of operations like arithmetic, logical, bitwise, etc.

There are following types of operators to perform different types of operations in C language.

Arithmetic Operators
Relational Operators
Logical Operators
Assignment Operator
Unary Operators
Ternary or Conditional Operators
Bitwise Operators
Misc Operator

Precedence of Operators in C:
-----------------------------
The precedence of operator species that which operator will be evaluated first and next.
The associativity specifies the operator direction to be evaluated; it may be left to right or right to left.

Arithmetic Operators:
---------------------
An arithmetic operator performs mathematical operations such as addition, subtraction and 
multiplication on numerical values (constants and variables).

Relational Operators:
---------------------
A relational operator checks the relationship between two operands. 
If the relation is true, it returns 1; if the relation is false, it returns value 0.
Operands may be variables, constants or expressions.
Relational operators are used in decision making and loops.

Logical Operators:
------------------
These operators are used to combine the results of two or more conditions. An expression 
containing logical operator returns either 0 or 1 depending upon whether expression results true 
or false. Logical operators are commonly used in decision making in C programming.

Assignment Operators:
---------------------
Assignment operators are used to assign a value (or) an expression 
(or) a value of a variable to another variable.
 Syntax : variable name=expression (or) value (or) variable

Compound assignment operator:
'C' provides compound assignment operators to assign a value to variable in order to assign a 
new value to a variable after performing a specified operation.

Increment and Decrement Operators / Unary Operators: 
----------------------------------------------------
Unary operators are having higher priority than the other operators. Unary operators, meaning 
they only operate on a single operand. 
Increment Operator in C Programming 
1. Increment operator is used to increment the current value of variable by adding integer 1. 
2. Increment operator can be applied to only variables. 
3. Increment operator is denoted by ++. 
We have two types of increment operator i.e Pre-Increment and Post-Increment Operator. 

Pre-Increment :
Pre-increment operator is used to increment the value of variable before using in the expression. In 
the Pre-Increment value is first incremented and then used inside the expression. 
b = ++y; 
In this example suppose the value of variable „y‟ is 5 then value of variable „b‟ will be 6 because 
the value of „y‟ gets modified before using it in a expression. 

Post-Increment :
Post-increment operator is used to increment the value of variable as soon as after executing 
expression completely in which post increment is used. In the Post-Increment value is first used 
in a expression and then incremented. 
b = x++; 
In this example suppose the value of variable „x‟ is 5 then value of variable „b‟ will be 5 because 
old value of „x‟ is used. 
 
 
Note :  
We cannot use increment operator on the constant values because increment operator operates on 
only variables. It increments the value of the variable by 1 and stores the incremented value back 
to the variable 
b = ++5; 
or 
b = 5++; 
 
The syntax of the operators is given below. 
 
          ++<variable name>                   --<variable name> 
         <variable name>++                    <variable name>-- 
The operator ++ adds 1 to the operand and – subtracts 1 from the operand. These  operators in 
two forms : prefix (++x) and postfix(x++). 
 
Where  
1 : ++x : Pre increment, first increment and then do the operation. 
2 : - -x  : Pre decrement, first decrements and then do the operation. 
3 : x++ : Post increment, first do the operation and then increment. 
4 : x- -  : Post decrement, first do the operation and then decrement. 

Conditional Operator/ Ternary operator: 
---------------------------------------
conditional operator checks the condition and executes the statement depending of the condition. 
A conditional operator is a ternary operator, that is, it works on 3 operands. 
Conditional operator consist of two symbols. 
 
                    1 : question mark (?). 
                    2 : colon ( : ). 

               +--------------------------------------+     
               |    Syntax : condition ? exp1 : exp2; |
               +--------------------------------------+

    It first evaluate the condition, if it is true (non-zero)  then the “exp1” is 
evaluated, if the condition is false (zero) then the “exp2” is evaluated. 

Bitwise Operators: 
------------------
Bitwise operators are used to manipulate the data at bit level. It operates on integers only. It 
may not be applied to float.In arithmetic-logic unit (which is within the CPU), mathematical 
operations like: addition, subtraction, multiplication and division are done in bit-level which 
makes processing faster and saves power. To perform bit-level operations in C programming, 
bitwise operators are used.

Bitwise AND operator & :
The output of bitwise AND is 1 if the corresponding bits of two operands is 1. If either bit of an 
operand is 0, the result of corresponding bit is evaluated to 0. 
Let us suppose the bitwise AND operation of two integers 12 and 25. 
12 = 00001100 (In Binary) 
25 = 00011001 (In Binary) 
C PROGRAMMING Page 43 
 
 
Bit Operation of 12 and 25 
  00001100 
& 00011001 
  ________ 
  00001000  = 8 (In decimal)

Bitwise OR operator | :
The output of bitwise OR is 1 if at least one corresponding bit of two operands is 1. In C 
Programming, bitwise OR operator is denoted by |. 
12 = 00001100 (In Binary) 
25 = 00011001 (In Binary) 
Bitwise OR Operation of 12 and 25 
  00001100 
| 00011001 
  ________ 
  00011101  = 29 (In decimal)

Bitwise XOR (exclusive OR) operator ^ 
The result of bitwise XOR operator is 1 if the corresponding bits of two operands are opposite. It 
is denoted by ^. 
12 = 00001100 (In Binary) 
25 = 00011001 (In Binary) 
Bitwise XOR Operation of 12 and 25 
  00001100 
| 00011001 
  ________ 
  00010101  = 21 (In decimal) 

Bitwise complement operator ~ 
Bitwise compliment operator is an unary operator (works on only one operand). It changes 1 to 0 
and 0 to 1. It is denoted by ~. 
35 = 00100011 (In Binary) 
Bitwise complement Operation of 35
~ 00100011  
  ________ 
  11011100  = 220 (In decimal) 

Twist in bitwise complement operator in C Programming 
The bitwise complement of 35 (~35) is -36 instead of 220, but why? 
For any integer n, bitwise complement of n will be -(n+1). To understand this, you should have 
the knowledge of 2's complement. 
2's Complement 
Two's complement is an operation on binary numbers. The 2's complement of a number is equal 
to the complement of that number plus 1. For example: 
 Decimal         Binary           2's complement  
   0            00000000           -(11111111+1) = -00000000 = -0(decimal) 
   1            00000001           -(11111110+1) = -11111111 = -256(decimal) 
   12           00001100           -(11110011+1) = -11110100 = -244(decimal) 
   220          11011100           -(00100011+1) = -00100100 = -36(decimal) 
Note: Overflow is ignored while computing 2's complement. 
The bitwise complement of 35 is 220 (in decimal). The 2's complement of 220 is -36. Hence, the 
output is -36 instead of 220. 
Bitwise complement of any number N is -(N+1). Here's how: 
bitwise complement of N = ~N (represented in 2's complement form) 
2'complement of ~N= -(~(~N)+1) = -(N+1) 

Right Shift Operator :
Right shift operator shifts all bits towards right by certain number of specified bits. It is denoted 
by >>. 

Left Shift Operator :
Left shift operator shifts all bits towards left by certain number of specified bits. It is denoted by 
<<.

Misc Operator / Special Operators :
-----------------------------------
1 ) Comma Operator :
The comma operator is used to separate the statement elements such as 
variables, constants or expressions, and this operator is used to link the related expressions 
together, such expressions can be evaluated from left to right and the value of right most 
expressions is the value of combined expressions.
 
2 ) Sizeof Operator :
The sizeof() is a unary operator, that returns the length in bytes o the 
specified variable, and it is very useful to find the bytes occupied by the specified variable in the 
memory. 
 
Syntax :  sizeof(variable-name); 
                
                  int a; 
       Ex : sizeof(a);      //OUTPUT-----2bytes